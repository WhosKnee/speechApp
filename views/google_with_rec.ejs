<html>

<head>
    <script src="https://apis.google.com/js/api.js"></script>
    <script src="https://cdn.rawgit.com/mattdiamond/Recorderjs/08e7abd9/dist/recorder.js"></script>
</head>

<body>
    <h1>Simple Recorder.js demo</h1>
    <p><small>Made by the <a href="https://addpipe.com" target="_blank">Pipe Video Recording Platform</a></small></p>
    <p>This demo uses <a href="https://github.com/mattdiamond/Recorderjs" target="_blank">Recorder.js</a> to record
        wav/PCM audio directly in the browser. Matt Diamondâ€˜s <a target="_blank"
            href="https://github.com/mattdiamond/Recorderjs">Recorder.js</a> is a popular JavaScript library for
        recording audio in the browser as uncompressed pcm audio in .wav containers. Before it, the only way to record
        audio was to use Flash.</p>
    <p>Check out the <a href="https://github.com/addpipe/simple-recorderjs-demo" target="_blank">code on GitHub</a> and
        <a href="https://addpipe.com/blog/using-recorder-js-to-capture-wav-audio-in-your-html5-web-site/"
            target="_blank">our blog post on using Recorder.js to capture WAV audio</a>.</p>
    <div id="controls">
        <button id="recordButton">Record</button>
        <button id="pauseButton" disabled>Pause</button>
        <button id="stopButton" disabled>Stop</button>
    </div>
    <div id="formats">Format: start recording to see sample rate</div>
    <p><strong>Recordings:</strong></p>
    <ol id="recordingsList"></ol>

    <script>
        var user_audio_blob;
        var encoded_64;
        var wav_base_64 = "";



        URL = window.URL || window.webkitURL;

        var gumStream; 						//stream from getUserMedia()
        var rec; 							//Recorder.js object
        var input; 							//MediaStreamAudioSourceNode we'll be recording

        // shim for AudioContext when it's not avb. 
        var AudioContext = window.AudioContext || window.webkitAudioContext;
        var audioContext //audio context to help us record

        var recordButton = document.getElementById("recordButton");
        var stopButton = document.getElementById("stopButton");
        var pauseButton = document.getElementById("pauseButton");

        //add events to those 2 buttons
        recordButton.addEventListener("click", startRecording);
        stopButton.addEventListener("click", stopRecording);
        pauseButton.addEventListener("click", pauseRecording);

        function startRecording() {
            console.log("recordButton clicked");

            /*
                Simple constraints object, for more advanced audio features see
                https://addpipe.com/blog/audio-constraints-getusermedia/
            */

            var constraints = { audio: true, video: false }

            /*
                Disable the record button until we get a success or fail from getUserMedia() 
            */

            recordButton.disabled = true;
            stopButton.disabled = false;
            pauseButton.disabled = false

            /*
                We're using the standard promise based getUserMedia() 
                https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia
            */

            navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {
                console.log("getUserMedia() success, stream created, initializing Recorder.js ...");

                /*
                    create an audio context after getUserMedia is called
                    sampleRate might change after getUserMedia is called, like it does on macOS when recording through AirPods
                    the sampleRate defaults to the one set in your OS for your playback device
                */
                audioContext = new AudioContext();

                //update the format 
                document.getElementById("formats").innerHTML = "Format: 1 channel pcm @ " + audioContext.sampleRate / 1000 + "kHz"

                /*  assign to gumStream for later use  */
                gumStream = stream;

                /* use the stream */
                input = audioContext.createMediaStreamSource(stream);

                /* 
                    Create the Recorder object and configure to record mono sound (1 channel)
                    Recording 2 channels  will double the file size
                */
                rec = new Recorder(input, { numChannels: 1 })

                //start the recording process
                rec.record()

                console.log("Recording started");

            }).catch(function (err) {
                //enable the record button if getUserMedia() fails
                recordButton.disabled = false;
                stopButton.disabled = true;
                pauseButton.disabled = true
            });
        }

        function pauseRecording() {
            console.log("pauseButton clicked rec.recording=", rec.recording);
            if (rec.recording) {
                //pause
                rec.stop();
                pauseButton.innerHTML = "Resume";
            } else {
                //resume
                rec.record()
                pauseButton.innerHTML = "Pause";

            }
        }

        function stopRecording() {
            console.log("stopButton clicked");

            //disable the stop button, enable the record too allow for new recordings
            stopButton.disabled = true;
            recordButton.disabled = false;
            pauseButton.disabled = true;

            //reset button just in case the recording is stopped while paused
            pauseButton.innerHTML = "Pause";

            //tell the recorder to stop the recording
            rec.stop();

            //stop microphone access
            gumStream.getAudioTracks()[0].stop();

            //create the wav blob and pass it on to createDownloadLink
            rec.exportWAV(blob => {
                user_audio_blob = blob;
                let readr = new FileReader();
                readr.readAsDataURL(user_audio_blob);

                readr.onload = function () {
                    encoded_64 = readr.result;
                    let wav_start = encoded_64.search("base64,") + 7;
                    wav_base_64 = encoded_64.slice(wav_start);
                }
            });
        }




        /**
         * Sample JavaScript code for speech.speech.recognize
         * See instructions for running APIs Explorer code samples locally:
         * https://developers.google.com/explorer-help/guides/code_samples#javascript
         */
        var recognized_speech;

        function loadClient() {
            gapi.client.setApiKey("AIzaSyD4VGSMBBi9t55mpV3sO3rId6N4cBJ24b4");
            return gapi.client.load("https://content.googleapis.com/discovery/v1/apis/speech/v1p1beta1/rest")
                .then(function () { console.log("GAPI client loaded for API"); },
                    function (err) { console.error("Error loading GAPI client for API", err); });
        }

        // Make sure the client is loaded before calling this method.
        function execute() {
            return gapi.client.speech.speech.recognize({
                "audio": {
                    "content": wav_base_64
                },
                "config": {
                    //"encoding": "MP3",                 ------not needed for WAV files
                    //"sampleRateHertz": 16000,          ____/
                    "languageCode": "en-US",
                    "enableWordConfidence": true,
                    "enableAutomaticPunctuation": false,
                }
            })
                .then(function (response) {
                    // Handle the results here (response.result has the parsed body).
                    console.log("Response", response);
                    console.log("Response", response.result);
                    recognized_speech = response.result;
                },
                    function (err) { console.error("Execute error", err); });
        }

        gapi.load("client");

    </script>
    <button onclick="loadClient()">load</button>
    <button onclick="execute()">execute</button>
</body>

</html>